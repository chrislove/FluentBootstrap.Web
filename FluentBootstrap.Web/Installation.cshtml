@using FluentBootstrap

@{
    Page.Title = "Installation";
    Layout = "_Layout.cshtml";
}

@Html.Bootstrap(this).PageHeader("Installation")

@Html.Bootstrap(this).Heading1("Get Bootstrap")
<p>In order to provide the most flexibility, FluentBootstrap does not code with a dependency on Bootstrap. This allows you to select the most appropriate mechanism of including Bootstrap for your situation. For example, you can use the default <a href="http://www.nuget.org/packages/bootstrap/">Bootstrap NuGet package</a>, or use the LESS source. You can even go to the <a href="http://getbootstrap.com">Bootstrap web site</a> and download the CSS for manual inclusion. However you get Bootstrap, the corresponding CSS and JavaScript must be included on your page(s).</p>

@Html.Bootstrap(this).Heading1("Install FluentBootstrap")
<p>FluentBootstrap is designed to work in any environment. It consists of a code library, and in most cases, an architecture-specific library. The following instructions detail how to set up FluentBootstrap for various platforms.</p>

@Html.Bootstrap(this).Heading3("ASP.NET MVC")
<p>The easiest way to get FluentBootstrap working on ASP.NET MVC is to get the FluentBootstrap.Mvc NuGet package. This will pull down both the core library and the special support for ASP.NET MVC including the Bootstrap model binding helpers.</p>
<p>All of the extensions for FluentBootstrap are under the root <code>FluentBootstrap</code> namespace. In order to access this namespace from your view code, you'll probably want to add it to your <code>web.config</code> like this:</p>
<pre><code class="language-markup">@Html.Raw(HttpUtility.HtmlEncode(@"<system.web.webPages.razor>
    <host .../>
    <pages ...>
        <namespaces>
            ...
            <add namespace=""FluentBootstrap"" />
        </namespaces>
    </pages>
</system.web.webPages.razor>"))</code></pre>
<p>This will let you write code like <code>@@Html.Bootstrap().Heading1("My Header")</code>. Alternatively, you can write code like <code>@@Bootstrap.Heading1("My Header")</code> by creating a property in your base page class (if you don't have a custom base page class, <a href="http://haacked.com/archive/2011/02/21/changing-base-type-of-a-razor-view.aspx">see here for instructions on how to create one</a>):</p>
<pre><code class="language-csharp">@Html.Raw(@"public MvcBootstrapHelper<TModel> Bootstrap
{
    get { return Html.Bootstrap(); }
}")</code></pre>

@Html.Bootstrap(this).Heading3("ASP.NET WebPages")
<p>If you prefer to use ASP.NET WebPages, you can get the FluentBootstrap.WebPages NuGet package. This will pull down both the core library and the special support for ASP.NET WebPages. You will need to include <code>@@using FluentBootstrap</code> at the top of every page. You will also need to pass in the page instance when using the helper like <code>@@Html.Bootstrap(this).Heading1("My Header")</code>. This is because the ASP.NET WebPages <code>HtmlHelper</code> class does not provide all the information needed to use FluentBootstrap (such as access to the request context).</p>

@Html.Bootstrap(this).Heading3("Use It Directly")
<p>If you are outside of ASP.NET or you just want to generate Bootstrap HTML strings, then you can get by with just the FluentBootstrap NuGet package. This provides a <code>SimpleBootstrapHelper</code> class that you could instantiate to get access to all of the FluentBootstrap extensions.</p>